name: Optimized Multi-Platform CentOS 7.9 Build

env:
  IMAGE_VERSION: "v1.0.0"
  IMAGE_NAME: "centos79-java8-libreoffice"

on:
  workflow_dispatch:
    inputs:
      full_test:
        description: 'Run full tests (slower)'
        type: boolean
        default: false
      platforms:
        description: 'Target platforms'
        type: choice
        default: 'linux/amd64,linux/arm64'
        options:
          - 'linux/amd64,linux/arm64'
          - 'linux/arm64'
          - 'linux/amd64'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 优化的构建作业
  build:
    runs-on: ubuntu-latest
    outputs:
      image-pushed: ${{ github.event_name != 'pull_request' }}
    strategy:
      fail-fast: false
      matrix:
        # 条件化矩阵构建，提升并行性
        include:
          - platform: linux/amd64
            cache-suffix: amd64
          - platform: linux/arm64
            cache-suffix: arm64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (ARM64 only)
        if: matrix.platform == 'linux/arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          # 优化的BuildKit配置
          driver-opts: |
            network=host
            image=moby/buildkit:v0.12.0
          buildkitd-flags: |
            --allow-insecure-entitlement=network.host

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 优化的单平台构建（并行执行）
      - name: Build platform-specific image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.optimized  # 使用优化的Dockerfile
          platforms: ${{ matrix.platform }}
          push: false  # 先构建不推送
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ matrix.cache-suffix }}-latest
          labels: |
            org.opencontainers.image.title=Optimized ${{ matrix.platform }} CentOS 7.9 with Java 8 and LibreOffice
          # 简化的缓存策略
          cache-from: |
            type=gha,scope=build-${{ matrix.cache-suffix }}-${{ github.ref_name }}
            type=gha,scope=build-${{ matrix.cache-suffix }}-main
          cache-to: |
            type=gha,mode=max,scope=build-${{ matrix.cache-suffix }}-${{ github.ref_name }}
          # 构建优化参数
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILDKIT_MULTI_PLATFORM=1

  # 合并和推送多平台镜像
  push-multiplatform:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 最终多平台镜像构建和推送
      - name: Build and push multi-platform manifest
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.optimized
          platforms: ${{ inputs.platforms || 'linux/amd64,linux/arm64' }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          # 利用之前构建的缓存
          cache-from: |
            type=gha,scope=build-amd64-${{ github.ref_name }}
            type=gha,scope=build-arm64-${{ github.ref_name }}

  # 快速功能验证（并行优化）
  quick-test:
    runs-on: ubuntu-latest
    needs: push-multiplatform
    if: needs.push-multiplatform.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Set up QEMU (ARM64 only)
        if: matrix.platform == 'linux/arm64'
        run: docker run --rm --privileged tonistiigi/binfmt --install arm64

      - name: Quick functionality test
        run: |
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
          echo "Testing $IMAGE_TAG on ${{ matrix.platform }}"
          
          # 并行基础测试
          docker run --rm --platform ${{ matrix.platform }} "$IMAGE_TAG" bash -c "
            echo '=== System Info ===' && uname -a &&
            echo '=== Java Version ===' && java -version &&
            echo '=== LibreOffice Version ===' && libreoffice --version &&
            echo '=== Test Complete ==='
          "

  # 可选的完整测试（仅手动触发）
  full-test:
    runs-on: ubuntu-latest
    needs: push-multiplatform
    if: github.event_name == 'workflow_dispatch' && inputs.full_test && needs.push-multiplatform.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        run: docker run --rm --privileged tonistiigi/binfmt --install arm64

      - name: Document conversion test
        run: |
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}"
          
          # 创建测试文档
          echo "ARM64 LibreOffice 转换测试" > test.txt
          echo "中文支持：你好世界" >> test.txt
          echo "English: Hello World" >> test.txt
          
          mkdir -p test-output
          
          # ARM64平台文档转换测试
          docker run --rm --platform linux/arm64 \
            -v $(pwd)/test.txt:/tmp/test.txt \
            -v $(pwd)/test-output:/output \
            "$IMAGE_TAG" \
            bash -c "
              libreoffice --headless --convert-to pdf --outdir /output /tmp/test.txt
              echo 'Conversion completed:'
              ls -la /output/
            "

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: conversion-test-results
          path: test-output/
          retention-days: 3  # 减少存储时间