name: Build Multi-Platform CentOS 7.9 with Java8 and LibreOffice

env:
  IMAGE_VERSION: "v1.0.0"
  IMAGE_NAME: "centos79-java8-libreoffice"

on:
  workflow_dispatch:
    inputs:
      full_test:
        description: 'Run full tests (slower)'
        type: boolean
        default: false
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 快速构建作业
  build:
    runs-on: ubuntu-latest
    outputs:
      image-pushed: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      # 缓存 QEMU 二进制文件（多平台）
      - name: Cache QEMU binaries
        uses: actions/cache@v4
        with:
          path: /usr/bin/qemu-*
          key: qemu-${{ runner.os }}-${{ runner.arch }}-multiplatform
          restore-keys: |
            qemu-${{ runner.os }}-

      - name: Setup multi-platform emulation with binfmt
        run: |
          # 使用 tonistiigi/binfmt 设置多平台模拟
          docker run --rm --privileged tonistiigi/binfmt --install arm64,amd64
          echo "✅ Multi-platform binfmt emulation enabled"

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          # 启用实验性特性以提升多平台构建性能
          driver-opts: |
            network=host
            image=moby/buildkit:v0.12.0
            env.BUILDKIT_STEP_LOG_MAX_SIZE=50000000
            env.BUILDKIT_STEP_LOG_MAX_SPEED=100000000
          # 使用本地构建器提升性能
          use: true
          # 启用更多并发特性
          buildkitd-flags: |
            --allow-insecure-entitlement=network.host
            --allow-insecure-entitlement=security.insecure

      # 缓存 Docker Buildx 状态
      - name: Cache Docker Buildx state
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            buildx-${{ runner.os }}-

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          labels: |
            org.opencontainers.image.title=Multi-Platform CentOS 7.9 with Java 8 and LibreOffice
            org.opencontainers.image.description=Multi-architecture (AMD64/ARM64) CentOS 7.9 Docker image with Java 8 and LibreOffice for document processing
            org.opencontainers.image.vendor=cmming
          # 优化缓存策略 - 多级缓存
          cache-from: |
            type=gha,scope=build-${{ github.ref_name }}
            type=gha,scope=build-main
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache-${{ github.ref_name }}
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache-main
          cache-to: |
            type=gha,mode=max,scope=build-${{ github.ref_name }}
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache-${{ github.ref_name }},mode=max
          # 多平台构建优化参数
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILDKIT_MULTI_PLATFORM=1
          # 构建器优化配置
          builder: ${{ steps.buildx.outputs.name }}

  # 快速测试作业（并行）
  quick-test:
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.image-pushed == 'true'
    steps:
      - name: Checkout repository  
        uses: actions/checkout@v4

      # 缓存测试环境
      - name: Cache test environment
        uses: actions/cache@v4
        with:
          path: |
            /tmp/.buildx-cache
            ~/.docker
          key: test-env-${{ runner.os }}-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            test-env-${{ runner.os }}-

      - name: Set up QEMU and binfmt
        run: |
          docker run --rm --privileged tonistiigi/binfmt --install arm64

      - name: Quick functionality test
        run: |
          echo "=== 快速功能验证 ==="
          
          # 使用环境变量定义的镜像标签
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
          echo "测试镜像: $IMAGE_TAG"
          
          # 并行运行基础测试（更快）
          echo "运行并行基础测试..."
          (
            echo "Java 测试:" && \
            docker run --rm --platform linux/arm64 "$IMAGE_TAG" java -version 2>&1 | head -3
          ) &
          
          (
            echo "LibreOffice 测试:" && \
            docker run --rm --platform linux/arm64 "$IMAGE_TAG" libreoffice --version 2>&1 | head -1
          ) &
          
          (
            echo "架构验证:" && \
            docker run --rm --platform linux/arm64 "$IMAGE_TAG" uname -m 2>&1
          ) &
          
          # 等待所有后台任务完成
          wait
          
          echo "✅ 基础功能验证完成"

  # 完整测试作业（仅在需要时运行）
  full-test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && inputs.full_test && needs.build.outputs.image-pushed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU and binfmt
        run: |
          docker run --rm --privileged tonistiigi/binfmt --install arm64

      - name: Document conversion test (complete)
        run: |
          # 直接使用已知的镜像标签
          IMAGE_TAG='${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}'
          echo "=== 文档转换功能测试 ==="
          echo "🔍 使用镜像: $IMAGE_TAG"
          
          # 创建简单测试文档
          cat > test.txt << 'EOF'
          ARM64 CentOS LibreOffice 测试
          
          功能测试：
          - 中文支持：你好世界
          - English: Hello World  
          - 数字: 123456789
          - 架构: ARM64 (aarch64)
          EOF
          
          mkdir -p test-output
          
          echo "🔄 转换文档..."
          docker run --rm --platform linux/arm64 \
            -v $(pwd)/test.txt:/tmp/test.txt \
            -v $(pwd)/test-output:/output \
            "$IMAGE_TAG" \
            bash -c "
              libreoffice --headless --convert-to pdf --outdir /output /tmp/test.txt
              libreoffice --headless --convert-to docx --outdir /output /tmp/test.txt
              echo '转换完成:'
              ls -la /output/
            "
          
          echo "✅ 文档转换测试完成"

      - name: Upload conversion test results
        uses: actions/upload-artifact@v4
        with:
          name: libreoffice-conversion-results
          path: test-output/
          retention-days: 7

  # 仅在手动触发时更新 Docker Hub 描述
  update-description:
    runs-on: ubuntu-latest
    needs: [build, quick-test]
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          short-description: ARM64 CentOS 7.9 with Java 8 and LibreOffice for document processing
          readme-filepath: ./README.md