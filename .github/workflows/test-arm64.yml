name: Test ARM64 Image on ARM Runners

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to test'
        required: false
        default: 'latest'
  workflow_call:
    inputs:
      image_tag:
        description: 'Docker image tag to test'
        required: false
        default: 'latest'
        type: string

jobs:
  test-arm64:
    # 如果有 ARM64 self-hosted runner，使用它
    # runs-on: [self-hosted, linux, arm64]
    # 否则使用标准 runner 但跳过实际的容器运行测试
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU for ARM64 emulation
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Setup enhanced ARM64 emulation with binfmt
        run: |
          echo "=== 设置增强的 ARM64 模拟 ==="
          # 使用 tonistiigi/binfmt 提供更好的 ARM64 模拟
          docker run --rm --privileged tonistiigi/binfmt --install arm64
          
          # 验证 binfmt 设置
          echo "已安装的 binfmt 模拟器:"
          docker run --rm --privileged tonistiigi/binfmt
          
          echo "✅ 增强的 ARM64 模拟已启用"

      - name: Test ARM64 image functionality
        run: |
          IMAGE_TAG="${{ inputs.image_tag || 'latest' }}"
          DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME || 'cmming' }}"
          IMAGE_NAME="$DOCKERHUB_USERNAME/arm-centos79-java8-libreoffice:$IMAGE_TAG"
          
          echo "=== 测试 ARM64 镜像: $IMAGE_NAME ==="
          
          # 尝试拉取镜像
          docker pull --platform linux/arm64 "$IMAGE_NAME"
          
          # 运行基础测试
          echo "=== Java 版本测试 ==="
          docker run --rm --platform linux/arm64 "$IMAGE_NAME" java -version
          
          echo "=== LibreOffice 版本测试 ==="
          docker run --rm --platform linux/arm64 "$IMAGE_NAME" libreoffice --version
          
          echo "=== 架构验证 ==="
          ARCH=$(docker run --rm --platform linux/arm64 "$IMAGE_NAME" uname -m)
          echo "容器架构: $ARCH"
          if [ "$ARCH" != "aarch64" ]; then
            echo "❌ 错误: 期望架构 aarch64，实际 $ARCH"
            exit 1
          fi
          
          echo "=== 中文环境测试 ==="
          docker run --rm --platform linux/arm64 "$IMAGE_NAME" bash -c "
            echo '当前语言环境:'
            locale | grep LANG
            echo '中文字符测试: 你好世界 Hello World'
            echo '字体检查:'
            fc-list | grep -i 'zh\|cjk\|han\|noto\|wqy' | wc -l | xargs echo '找到中文字体数量:'
          "

      - name: Test document conversion
        run: |
          IMAGE_TAG="${{ inputs.image_tag || 'latest' }}"
          DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME || 'cmming' }}"
          IMAGE_NAME="$DOCKERHUB_USERNAME/arm-centos79-java8-libreoffice:$IMAGE_TAG"
          
          echo "=== LibreOffice 文档转换测试 ==="
          
          # 创建测试目录
          mkdir -p test-output
          
          # 运行文档转换测试
          docker run --rm --platform linux/arm64 \
            -v $(pwd)/test-document.txt:/tmp/test-document.txt \
            -v $(pwd)/test-output:/output \
            "$IMAGE_NAME" \
            bash -c "
              echo '测试文件内容:'
              head -3 /tmp/test-document.txt
              echo ''
              
              echo '转换为 PDF:'
              libreoffice --headless --convert-to pdf --outdir /output /tmp/test-document.txt
              if [ -f /output/test-document.pdf ]; then
                echo '✅ PDF 转换成功'
                ls -la /output/test-document.pdf
              else
                echo '❌ PDF 转换失败'
                exit 1
              fi
              
              echo '转换为 DOCX:'
              libreoffice --headless --convert-to docx --outdir /output /tmp/test-document.txt
              if [ -f /output/test-document.docx ]; then
                echo '✅ DOCX 转换成功'
                ls -la /output/test-document.docx
              else
                echo '❌ DOCX 转换失败'
                exit 1
              fi
            "
          
          # 验证输出文件
          echo "=== 转换结果验证 ==="
          if [ -f test-output/test-document.pdf ]; then
            echo "✅ PDF 文件已生成: $(ls -la test-output/test-document.pdf)"
          fi
          
          if [ -f test-output/test-document.docx ]; then
            echo "✅ DOCX 文件已生成: $(ls -la test-output/test-document.docx)"
          fi

      - name: Cleanup test files
        if: always()
        run: |
          rm -rf test-output